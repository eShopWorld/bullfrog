// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BullfrogApi.
    /// </summary>
    public static partial class BullfrogApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<string> ListScaleGroups(this IBullfrogApi operations)
            {
                return operations.ListScaleGroupsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> ListScaleGroupsAsync(this IBullfrogApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListScaleGroupsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scaleGroup'>
            /// </param>
            public static ScaleGroupDefinition GetDefinition(this IBullfrogApi operations, string scaleGroup)
            {
                return operations.GetDefinitionAsync(scaleGroup).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scaleGroup'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ScaleGroupDefinition> GetDefinitionAsync(this IBullfrogApi operations, string scaleGroup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDefinitionWithHttpMessagesAsync(scaleGroup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scaleGroup'>
            /// </param>
            /// <param name='validateOnly'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void SetDefinition(this IBullfrogApi operations, string scaleGroup, bool? validateOnly = default(bool?), ScaleGroupDefinition body = default(ScaleGroupDefinition))
            {
                operations.SetDefinitionAsync(scaleGroup, validateOnly, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scaleGroup'>
            /// </param>
            /// <param name='validateOnly'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetDefinitionAsync(this IBullfrogApi operations, string scaleGroup, bool? validateOnly = default(bool?), ScaleGroupDefinition body = default(ScaleGroupDefinition), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SetDefinitionWithHttpMessagesAsync(scaleGroup, validateOnly, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scaleGroup'>
            /// </param>
            public static void RemoveDefinition(this IBullfrogApi operations, string scaleGroup)
            {
                operations.RemoveDefinitionAsync(scaleGroup).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scaleGroup'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveDefinitionAsync(this IBullfrogApi operations, string scaleGroup, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveDefinitionWithHttpMessagesAsync(scaleGroup, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void Get(this IBullfrogApi operations)
            {
                operations.GetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAsync(this IBullfrogApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scaleGroup'>
            /// </param>
            public static IList<ScheduledScaleEvent> ListScheduledEvents(this IBullfrogApi operations, string scaleGroup)
            {
                return operations.ListScheduledEventsAsync(scaleGroup).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scaleGroup'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ScheduledScaleEvent>> ListScheduledEventsAsync(this IBullfrogApi operations, string scaleGroup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListScheduledEventsWithHttpMessagesAsync(scaleGroup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scaleGroup'>
            /// </param>
            /// <param name='eventId'>
            /// </param>
            public static ScheduledScaleEvent GetScheduledEvent(this IBullfrogApi operations, string scaleGroup, System.Guid eventId)
            {
                return operations.GetScheduledEventAsync(scaleGroup, eventId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scaleGroup'>
            /// </param>
            /// <param name='eventId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ScheduledScaleEvent> GetScheduledEventAsync(this IBullfrogApi operations, string scaleGroup, System.Guid eventId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetScheduledEventWithHttpMessagesAsync(scaleGroup, eventId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scaleGroup'>
            /// </param>
            /// <param name='eventId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ScheduledScaleEvent SaveScaleEvent(this IBullfrogApi operations, string scaleGroup, System.Guid eventId, ScaleEvent body = default(ScaleEvent))
            {
                return operations.SaveScaleEventAsync(scaleGroup, eventId, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scaleGroup'>
            /// </param>
            /// <param name='eventId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ScheduledScaleEvent> SaveScaleEventAsync(this IBullfrogApi operations, string scaleGroup, System.Guid eventId, ScaleEvent body = default(ScaleEvent), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SaveScaleEventWithHttpMessagesAsync(scaleGroup, eventId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scaleGroup'>
            /// </param>
            /// <param name='eventId'>
            /// </param>
            public static void DeleteScaleEvent(this IBullfrogApi operations, string scaleGroup, System.Guid eventId)
            {
                operations.DeleteScaleEventAsync(scaleGroup, eventId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scaleGroup'>
            /// </param>
            /// <param name='eventId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteScaleEventAsync(this IBullfrogApi operations, string scaleGroup, System.Guid eventId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteScaleEventWithHttpMessagesAsync(scaleGroup, eventId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scaleGroup'>
            /// </param>
            public static ScaleGroupState GetCurrentState(this IBullfrogApi operations, string scaleGroup)
            {
                return operations.GetCurrentStateAsync(scaleGroup).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scaleGroup'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ScaleGroupState> GetCurrentStateAsync(this IBullfrogApi operations, string scaleGroup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCurrentStateWithHttpMessagesAsync(scaleGroup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
