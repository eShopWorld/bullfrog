// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Configuration of virtual machine scale set which is part of the scale
    /// group.
    /// </summary>
    public partial class ScaleSetConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the ScaleSetConfiguration class.
        /// </summary>
        public ScaleSetConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScaleSetConfiguration class.
        /// </summary>
        public ScaleSetConfiguration(string name, string autoscaleSettingsResourceId, string profileName, string loadBalancerResourceId, int? healthPortPort = default(int?), int? requestsPerInstance = default(int?), int? minInstanceCount = default(int?), double? reservedInstances = default(double?), ScaleSetRunbookConfiguration runbook = default(ScaleSetRunbookConfiguration))
        {
            Name = name;
            AutoscaleSettingsResourceId = autoscaleSettingsResourceId;
            ProfileName = profileName;
            LoadBalancerResourceId = loadBalancerResourceId;
            HealthPortPort = healthPortPort;
            RequestsPerInstance = requestsPerInstance;
            MinInstanceCount = minInstanceCount;
            ReservedInstances = reservedInstances;
            Runbook = runbook;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name used as an identifier of this VM scale set
        /// configuration.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the resource id of the autoscale settings which
        /// controls virtual machine scale set scaling.
        /// </summary>
        [JsonProperty(PropertyName = "autoscaleSettingsResourceId")]
        public string AutoscaleSettingsResourceId { get; set; }

        /// <summary>
        /// Gets or sets the name of the profile of autoscale settings which is
        /// used to control VMSS scaling.
        /// </summary>
        [JsonProperty(PropertyName = "profileName")]
        public string ProfileName { get; set; }

        /// <summary>
        /// Gets or sets the resource id of a load balancer of virtual machine
        /// scale set.
        /// </summary>
        [JsonProperty(PropertyName = "loadBalancerResourceId")]
        public string LoadBalancerResourceId { get; set; }

        /// <summary>
        /// Gets or sets the port used for health probes by a load balancer
        /// which should be used to check
        /// availability of VMs in the scale set.
        /// </summary>
        [JsonProperty(PropertyName = "healthPortPort")]
        public int? HealthPortPort { get; set; }

        /// <summary>
        /// Gets or sets the number of requests per VMSS instance
        /// </summary>
        [JsonProperty(PropertyName = "requestsPerInstance")]
        public int? RequestsPerInstance { get; set; }

        /// <summary>
        /// Gets or sets the minimal number of instances defined in the
        /// profile.
        /// </summary>
        [JsonProperty(PropertyName = "minInstanceCount")]
        public int? MinInstanceCount { get; set; }

        /// <summary>
        /// Gets or sets the number (might be partial) of VM instances which
        /// are not used to handle requests.
        /// </summary>
        [JsonProperty(PropertyName = "reservedInstances")]
        public double? ReservedInstances { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "runbook")]
        public ScaleSetRunbookConfiguration Runbook { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (AutoscaleSettingsResourceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AutoscaleSettingsResourceId");
            }
            if (ProfileName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ProfileName");
            }
            if (LoadBalancerResourceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "LoadBalancerResourceId");
            }
            if (HealthPortPort > 65535)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "HealthPortPort", 65535);
            }
            if (HealthPortPort < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "HealthPortPort", 1);
            }
            if (RequestsPerInstance > 1000000000)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "RequestsPerInstance", 1000000000);
            }
            if (RequestsPerInstance < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "RequestsPerInstance", 0);
            }
            if (MinInstanceCount > 1000)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MinInstanceCount", 1000);
            }
            if (MinInstanceCount < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MinInstanceCount", 1);
            }
            if (Runbook != null)
            {
                Runbook.Validate();
            }
        }
    }
}
